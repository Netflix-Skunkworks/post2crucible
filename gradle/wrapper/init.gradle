/**
 * Establish simple Gradle practices which lets a gradle project play nice in the Netflix infrastructure.
 */
import org.apache.ivy.plugins.resolver.FileSystemResolver;
import org.apache.ivy.plugins.resolver.URLResolver;

// Setup workspace path, based on Jenkins-standard workspace variable.
def workspace = System.getenv()['WORKSPACE']
if (workspace == null || workspace.trim().isEmpty()) {
    workspace = System.getenv()['HOME']
}

// Establish "workspace friendly" ivy home, used for its cache.
// We have to override Ivy's settings before we get too far into the process.
// TODO:jryan make sure this works for multi module projects.
def ivyHomeKey = 'ivy.default.ivy.user.dir'
if (System.getProperty(ivyHomeKey) == null) {
    System.setProperty(ivyHomeKey, workspace + '/.ivy2')
}

// Try to make these global on project.
rootProject {
    ext.artifactsBase = 'http://artifacts.netflix.com/'
    ext.ivyIvyPattern = '[organisation]/[module]/[revision]/[module]-[revision]-ivy.[ext]'
    ext.ivyArtifactPattern = '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
}

rootProject {
    allprojects {
        def isNebulaDev = rootProject.hasProperty('isNebulaDev') && rootProject.isNebulaDev
        buildscript {
            repositories {
                if (isNebulaDev) {
                    println "+==============================================================================="
                    println "+ Proceeding as a Nebula Developer, may the force be with you."
                    def devReleaseDir = new File("${workspace}/Tools/nebula/build/dev-repo").absolutePath
                    add(new FileSystemResolver()) {
                        name = 'dev-repo'
                        addIvyPattern "${devReleaseDir}/[organisation]/[module]/[revision]/[module]-[revision]-ivy.[ext]"
                        addArtifactPattern "${devReleaseDir}/[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]"
                        m2compatible = true
                        // None of these effectively kill caching.
                        //checkmodified = true
                        //force = true
                        //useOrigin = true
                        // Only a LocalFileRepositoryCacheManager doesn't cache binaries, which means builds of nebula are picked up immediately
                        //repositoryCacheManager = new org.gradle.api.internal.artifacts.ivyservice.ivyresolve.LocalFileRepositoryCacheManager(name);
                    }
                }

                // Pulls from repo.jfrog.com and repo1, so it has a maven layout.
                maven { url 'http://artifacts.netflix.com/build-gradle' }

                dependencies {
                    // Pinning for reproducibile builds, e.g. user can sync to a certain CL and use the same nebula.
                    classpath(group: 'netflix', name: 'nebula', version: isNebulaDev?'latest.snapshot':'1.3')
                }
            }
        }
        repositories {
            // We need a simple way of pointing to the appropriate repositories, outside of Nebula, for OSS projects.
            // In the future we can create a plugin out of RepoMan for the sole purpose of setting up our repositories.
            def localPublishDir = new File("${workspace}/ivy2-local").absolutePath
            add(new FileSystemResolver()) {
                name = 'local'
                addIvyPattern "${localPublishDir}/${ivyIvyPattern}"
                addArtifactPattern "${localPublishDir}/${ivyArtifactPattern}"
                checkmodified = true
            }
            add(new URLResolver()) {
                // TODO: Intelligently select nfrepo-${project.status}s or just ext-releases-local
                //name = "nfrepo-${project.status}s"
                name = "ext-releases-local"
                def artifactsUrl = artifactsBase + name
                addIvyPattern "${artifactsUrl}/[organisation]/[module]/[revision]/[module]-[revision]-ivy.[ext]"
                addArtifactPattern "${artifactsUrl}/[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]"
                m2compatible = true
            }
        }
    }
}
